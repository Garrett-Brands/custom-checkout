{"version":3,"file":"order-summary-3b7b5f9a.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/order/OrderSummaryHeader.tsx","webpack://checkout/./packages/core/src/app/order/OrderSummary.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nconst OrderSummaryHeader: FunctionComponent = ({ children }) => (\n    <header className=\"cart-header\">\n        <h3 className=\"cart-title optimizedCheckout-headingSecondary\">\n            <TranslatedString id=\"cart.cart_heading\" />\n        </h3>\n        {children}\n    </header>\n);\n\nexport default OrderSummaryHeader;\n","import {\n    ExtensionRegion,\n    LineItemMap,\n    ShopperCurrency,\n    StoreCurrency,\n} from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, ReactNode, useEffect, useMemo, useRef, useState } from 'react';\n\nimport { Extension } from '@bigcommerce/checkout/checkout-extension';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport OrderSummaryHeader from './OrderSummaryHeader';\nimport OrderSummaryItems from './OrderSummaryItems';\nimport OrderSummaryPrice from './OrderSummaryPrice';\nimport OrderSummarySection from './OrderSummarySection';\nimport OrderSummarySubtotals, { OrderSummarySubtotalsProps } from './OrderSummarySubtotals';\nimport OrderSummaryTotal from './OrderSummaryTotal';\nimport removeBundledItems from './removeBundledItems';\nimport { Address } from '@faker-js/faker/address';\n\nexport interface OrderSummaryProps {\n    lineItems: LineItemMap;\n    total: number;\n    headerLink: ReactNode;\n    storeCurrency: StoreCurrency;\n    shopperCurrency: ShopperCurrency;\n    additionalLineItems?: ReactNode;\n}\n\nconst OrderSummary: FunctionComponent<OrderSummaryProps & OrderSummarySubtotalsProps> = ({\n    isTaxIncluded,\n    taxes,\n    storeCurrency,\n    shopperCurrency,\n    headerLink,\n    additionalLineItems,\n    lineItems,\n    total,\n    ...orderSummarySubtotalsProps\n}) => {\n    const nonBundledLineItems = useMemo(() => removeBundledItems(lineItems), [lineItems]);\n    const displayInclusiveTax = isTaxIncluded && taxes && taxes.length > 0;\n\n    interface ShipDateObject {\n        formatted: string;\n        isoDate: string;\n    }\n    \n    interface DeliveryDate {\n        formatted: string;\n    }\n    \n    interface ScheduledShipMethod {\n        shipDate: string;\n        deliveryDate: DeliveryDate;\n    }\n    \n    interface AllScheduledShipMethods {\n        [method: string]: ScheduledShipMethod[];\n    }\n\n    interface isMultiShippingMode {\n        value: string;\n    }\n      \n    const [formattedShipDate, setFormattedShipDate] = useState<string | null>(null);\n    const [formattedDeliveryEstimate, setFormattedDeliveryEstimate] = useState<string | null>(null);\n    const [zipCode, setZipCode] = useState<string | null>(null);\n    const [checkoutZipCode, setCheckoutZipCode] = useState<string | null>(null);\n    const [addressZipCode, setAddressZipCode] = useState<string | null>(null);\n    const [shippingMethod, setShippingMethod] = useState<string | null>(null);\n    const [isMultiShippingMode, setIsMultiShippingMode] = useState<boolean>(false);\n    const [multiShipClick, setMultiShipClick] = useState<boolean>(false);\n    const [addressClick, setAddressClick] = useState<boolean>(false);\n    console.log(multiShipClick)\n\n    function getDeliveryDateFormatted(\n        allScheduledShipMethods: AllScheduledShipMethods | null,\n        shippingMethod: string | null,\n        isoDate: string | null\n    ): string | null {\n        if (\n            allScheduledShipMethods &&\n            shippingMethod &&\n            Array.isArray(allScheduledShipMethods[shippingMethod])\n        ) {\n            const shippingData = allScheduledShipMethods[shippingMethod].find(\n                (entry) => entry.shipDate === isoDate\n            );\n            if (shippingData) {\n                return shippingData.deliveryDate.formatted;\n            }\n        }\n        return null;\n    }\n\n    function getFormattedShippingMethod(method: string): string | null {\n        const validMethods = [\"Ground\", \"Next Day Air\", \"2nd Day Air\"];\n        for (const validMethod of validMethods) {\n            if (method.includes(validMethod)) {\n                return validMethod; // Return the matched method\n            }\n        }\n        return null; // Return null if no valid method is found\n    }\n\n    const lastZipCodeRef = useRef<string | null>(null);\n\n    useEffect(() => {\n        window.addEventListener('multiShipClick', (event) => {\n            const multiShipClickEvent = event as CustomEvent<{ isMultiShippingMode: boolean }>;\n            console.log(multiShipClickEvent)\n            setMultiShipClick(!multiShipClick)\n        });\n        window.addEventListener('addressClick', (event) => {\n            const addressClickEvent = event as CustomEvent<{ address: Address }>;\n            const eventZipCode = (addressClickEvent.detail.address as unknown as { postalCode: string }).postalCode;\n            setAddressClick(!addressClick)\n            setAddressZipCode(eventZipCode)\n            setCheckoutZipCode(eventZipCode)\n        });\n        window.addEventListener('zipCodeInputEvent', (event) => {\n            const zipCodeInputEvent = event as CustomEvent<{ zipCodeInput: string }>;\n            const zipCodeValue = zipCodeInputEvent.detail.zipCodeInput\n            if (zipCodeValue && zipCodeValue !== lastZipCodeRef.current) {\n                lastZipCodeRef.current = zipCodeValue;\n                setAddressZipCode(zipCodeValue);\n                setCheckoutZipCode(zipCodeValue);\n            }\n        });\n    })\n\n    useEffect(() => {\n        const shipDateObject = localStorage.getItem('selectedShipDateObject');\n        const zipCodeItem = localStorage.getItem('zipCode');\n        const checkoutZipCodeItem = localStorage.getItem('checkoutZipCode')\n        const checkoutShippingMethod = localStorage.getItem('checkoutShippingMethod')\n        const isMultiShippingModeItem = localStorage.getItem('isMultiShippingMode')\n        const allScheduledShipMethods: AllScheduledShipMethods | null = JSON.parse(\n            localStorage.getItem('allScheduledShipMethods') || 'null'\n        );\n        \n        if (shipDateObject && shipDateObject !== 'null') {\n            const parsedShipDateObject: ShipDateObject = JSON.parse(shipDateObject);\n            const deliveryDate = getDeliveryDateFormatted(allScheduledShipMethods, shippingMethod, parsedShipDateObject.isoDate)\n            setFormattedShipDate(parsedShipDateObject.formatted);\n            setFormattedDeliveryEstimate(deliveryDate);\n        }\n        if (zipCodeItem && zipCodeItem !== 'null' && checkoutZipCodeItem && checkoutZipCodeItem !== 'null' && checkoutZipCodeItem !== undefined) {\n            const rawZipCode = localStorage.getItem(\"zipCode\");\n            const zipCodeItem = rawZipCode ? JSON.parse(rawZipCode) : null;\n            // const rawCheckoutZipCode = localStorage.getItem(\"checkoutZipCode\");\n            // const checkoutZipCodeItem = rawCheckoutZipCode ? JSON.parse(rawCheckoutZipCode) : null;\n            setZipCode(zipCodeItem);\n            // setCheckoutZipCode(checkoutZipCodeItem)\n        }\n        if (checkoutShippingMethod && checkoutShippingMethod !== 'null') {\n            const rawShippingMethod = localStorage.getItem(\"checkoutShippingMethod\");\n            const rawShippingMethodItem = rawShippingMethod ? JSON.parse(rawShippingMethod) : null;\n            setShippingMethod(getFormattedShippingMethod(rawShippingMethodItem));\n        }\n        if (isMultiShippingModeItem !== null && isMultiShippingModeItem !== 'null') {\n            const parsedIsMultiShipModeObject: isMultiShippingMode = JSON.parse(isMultiShippingModeItem);\n            if (typeof parsedIsMultiShipModeObject.value === \"boolean\") {\n                setIsMultiShippingMode(parsedIsMultiShipModeObject.value);\n            }\n        }\n    }), [isMultiShippingMode, zipCode, checkoutZipCode, shippingMethod, formattedShipDate, formattedDeliveryEstimate];\n\n    const renderEstimatedDelivery = () => {\n        if (zipCode === checkoutZipCode || zipCode === addressZipCode) {\n            return (\n                <div className=\"shipping-preview-item\" data-type=\"delivery-date\">\n                    <span>Estimated Delivery</span>\n                <span>{formattedDeliveryEstimate}</span>\n            </div>\n            );\n        }\n        return;\n    }\n\n    return (\n        <article className=\"cart optimizedCheckout-orderSummary\" data-test=\"cart\">\n            <OrderSummaryHeader>{headerLink}</OrderSummaryHeader>\n\n            <OrderSummarySection>\n                <OrderSummaryItems displayLineItemsCount items={nonBundledLineItems} />\n            </OrderSummarySection>\n\n            {formattedShipDate && \n                <OrderSummarySection>\n                    <div className=\"shipping-preview-container-orderSummary\">\n                        <div className=\"shipping-preview-item\" data-type=\"ship-date\">\n                            <span>Ship Date</span>\n                            <span>{formattedShipDate}</span>\n                        </div>\n                        { isMultiShippingMode === false && renderEstimatedDelivery()}\n                        {/* <span>values: {zipCode} {checkoutZipCode} {addressZipCode}</span> */}\n                    </div>\n                </OrderSummarySection>\n            }\n\n            <Extension region={ExtensionRegion.SummaryLastItemAfter} />\n\n            <OrderSummarySection>\n                <OrderSummarySubtotals isTaxIncluded={isTaxIncluded} taxes={taxes} {...orderSummarySubtotalsProps} />\n                {additionalLineItems}\n            </OrderSummarySection>\n\n            <OrderSummarySection>\n                <OrderSummaryTotal\n                    orderAmount={total}\n                    shopperCurrencyCode={shopperCurrency.code}\n                    storeCurrencyCode={storeCurrency.code}\n                />\n            </OrderSummarySection>\n\n            {displayInclusiveTax && <OrderSummarySection>\n                <h5\n                    className=\"cart-taxItem cart-taxItem--subtotal optimizedCheckout-contentPrimary\"\n                    data-test=\"tax-text\"\n                >\n                    <TranslatedString\n                        id=\"tax.inclusive_label\"\n                    />\n                </h5>\n                {(taxes || []).map((tax, index) => (\n                    <OrderSummaryPrice\n                        amount={tax.amount}\n                        key={index}\n                        label={tax.name}\n                        testId=\"cart-taxes\"\n                    />\n                ))}\n            </OrderSummarySection>}\n        </article>\n    );\n};\n\nexport default OrderSummary;\n"],"names":["children","className","TranslatedString","id","isTaxIncluded","taxes","storeCurrency","shopperCurrency","headerLink","additionalLineItems","lineItems","total","orderSummarySubtotalsProps","nonBundledLineItems","useMemo","removeBundledItems","displayInclusiveTax","length","useState","formattedShipDate","setFormattedShipDate","formattedDeliveryEstimate","setFormattedDeliveryEstimate","zipCode","setZipCode","checkoutZipCode","setCheckoutZipCode","addressZipCode","setAddressZipCode","shippingMethod","setShippingMethod","isMultiShippingMode","setIsMultiShippingMode","multiShipClick","setMultiShipClick","addressClick","setAddressClick","console","log","lastZipCodeRef","useRef","useEffect","window","addEventListener","event","multiShipClickEvent","eventZipCode","detail","address","postalCode","zipCodeValue","zipCodeInput","current","shipDateObject","localStorage","getItem","zipCodeItem","checkoutZipCodeItem","checkoutShippingMethod","isMultiShippingModeItem","allScheduledShipMethods","JSON","parse","parsedShipDateObject","deliveryDate","isoDate","Array","isArray","shippingData","find","entry","shipDate","formatted","getDeliveryDateFormatted","undefined","rawZipCode","rawShippingMethod","rawShippingMethodItem","method","validMethod","includes","getFormattedShippingMethod","parsedIsMultiShipModeObject","value","OrderSummarySection","OrderSummaryItems","displayLineItemsCount","items","renderEstimatedDelivery","Extension","region","OrderSummarySubtotals","OrderSummaryTotal","orderAmount","shopperCurrencyCode","code","storeCurrencyCode","map","tax","index","OrderSummaryPrice","amount","key","label","name","testId"],"sourceRoot":""}