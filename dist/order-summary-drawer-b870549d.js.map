{"version":3,"file":"order-summary-drawer-b870549d.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/order/getLineItemsCount.ts","webpack://checkout/./packages/ui/src/icon/IconCloseWithBorder.tsx","webpack://checkout/./packages/core/src/app/order/OrderModalSummarySubheader.tsx","webpack://checkout/./packages/core/src/app/order/OrderSummaryModal.tsx","webpack://checkout/./packages/core/src/app/order/OrderSummaryDrawer.tsx","webpack://checkout/./packages/core/src/app/ui/modal/ModalTrigger.tsx","webpack://checkout/./packages/ui/src/button/Button.tsx"],"sourcesContent":["import { LineItemMap } from '@bigcommerce/checkout-sdk';\n\nexport default function getLineItemsCount({\n    physicalItems,\n    digitalItems,\n    giftCertificates,\n    customItems,\n}: LineItemMap): number {\n    return (\n        physicalItems.length +\n        digitalItems.length +\n        giftCertificates.length +\n        (customItems || []).length\n    );\n}\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconCloseWithBorder: FunctionComponent = () => (\n    <svg fill=\"none\" height=\"37\" viewBox=\"0 0 38 37\" width=\"38\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            d=\"M38 18.5C38 28.7173 29.7173 37 19.5 37C9.28273 37 1 28.7173 1 18.5C1 8.28273 9.28273 0 19.5 0C29.7173 0 38 8.28273 38 18.5Z\"\n            fill=\"#F3F3F3\"\n        />\n        <path\n            clipRule=\"evenodd\"\n            d=\"M24.6671 24.6674L12.9998 13.0002L14.4141 11.5859L26.0813 23.2532L24.6671 24.6674Z\"\n            fill=\"black\"\n            fillRule=\"evenodd\"\n        />\n        <path\n            clipRule=\"evenodd\"\n            d=\"M25.6674 13.0004L14.0002 24.6676L12.5859 23.2534L24.2532 11.5862L25.6674 13.0004Z\"\n            fill=\"black\"\n            fillRule=\"evenodd\"\n        />\n    </svg>\n);\n\nexport default withIconContainer(IconCloseWithBorder);\n","import { LineItemMap } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport getItemsCount from './getItemsCount';\n\nexport interface OrderModalSummarySubheaderProps {\n    items: LineItemMap\n    amountWithCurrency: ReactNode;\n    shopperCurrencyCode: string;\n    storeCurrencyCode: string;\n}\n\nconst OrderModalSummarySubheader: FunctionComponent<OrderModalSummarySubheaderProps> = ({\n    items,\n    shopperCurrencyCode,\n    storeCurrencyCode,\n    amountWithCurrency,\n}) => {\n    const itemsCount = getItemsCount(items);\n    const hasDifferentCurrency = shopperCurrencyCode !== storeCurrencyCode;\n    const itemsText = itemsCount === 1 ? 'cart.item' : 'cart.items';\n\n    return <>\n        {itemsCount} <TranslatedString id={itemsText} /> | {amountWithCurrency} {\n            hasDifferentCurrency && <span>({shopperCurrencyCode})</span>\n        }\n    </>;\n};\n\nexport default memo(OrderModalSummarySubheader);\n","import {\n    Address,\n    LineItemMap,\n    ShopperCurrency as ShopperCurrencyType,\n    StoreCurrency,\n} from '@bigcommerce/checkout-sdk';\nimport React, { cloneElement, FunctionComponent, isValidElement, ReactNode, useEffect, useState, useRef } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { Button, IconCloseWithBorder } from '@bigcommerce/checkout/ui';\n\nimport { ShopperCurrency } from '../currency';\nimport { Modal, ModalHeader } from '../ui/modal';\nimport { isSmallScreen } from '../ui/responsive';\n\nimport OrderModalSummarySubheader from './OrderModalSummarySubheader';\nimport OrderSummaryItems from './OrderSummaryItems';\nimport OrderSummaryPrice from './OrderSummaryPrice';\nimport OrderSummarySection from './OrderSummarySection';\nimport OrderSummarySubtotals, { OrderSummarySubtotalsProps } from './OrderSummarySubtotals';\nimport OrderSummaryTotal from './OrderSummaryTotal';\n\nexport interface OrderSummaryDrawerProps {\n    additionalLineItems?: ReactNode;\n    items: LineItemMap;\n    total: number;\n    storeCurrency: StoreCurrency;\n    shopperCurrency: ShopperCurrencyType;\n    isOpen: boolean;\n    headerLink?: ReactNode & React.HTMLProps<HTMLDivElement>;\n    onRequestClose?(): void;\n    onAfterOpen?(): void;\n}\n\nconst OrderSummaryModal: FunctionComponent<\n    OrderSummaryDrawerProps & OrderSummarySubtotalsProps\n> = ({\n    additionalLineItems,\n    children,\n    isTaxIncluded,\n    taxes,\n    onRequestClose,\n    onAfterOpen,\n    storeCurrency,\n    shopperCurrency,\n    isOpen,\n    headerLink,\n    items,\n    total,\n    ...orderSummarySubtotalsProps\n}) => {\n\n    interface ShipDateObject {\n        formatted: string;\n    }\n\n    interface ShipDateObject {\n        formatted: string;\n        isoDate: string;\n    }\n    \n    interface DeliveryDate {\n        formatted: string;\n    }\n    \n    interface ScheduledShipMethod {\n        shipDate: string;\n        deliveryDate: DeliveryDate;\n    }\n    \n    interface AllScheduledShipMethods {\n        [method: string]: ScheduledShipMethod[];\n    }\n\n    interface isMultiShippingMode {\n        value: string;\n    }\n\n    const displayInclusiveTax = isTaxIncluded && taxes && taxes.length > 0;\n    const [formattedShipDate, setFormattedShipDate] = useState<string | null>(null);\n    const [formattedDeliveryEstimate, setFormattedDeliveryEstimate] = useState<string | null>(null);\n    const [zipCode, setZipCode] = useState<string | null>(null);\n    const [checkoutZipCode, setCheckoutZipCode] = useState<string | null>(null);\n    const [addressZipCode, setAddressZipCode] = useState<string | null>(null);\n    const [shippingMethod, setShippingMethod] = useState<string | null>(null);\n    const [isMultiShippingMode, setIsMultiShippingMode] = useState<boolean>(false);\n    const [multiShipClick, setMultiShipClick] = useState<boolean>(false);\n    const [addressClick, setAddressClick] = useState<boolean>(false);\n    console.log(multiShipClick)\n\n    const subHeaderText = <OrderModalSummarySubheader\n        amountWithCurrency={<ShopperCurrency amount={total} />}\n        items={items}\n        shopperCurrencyCode={shopperCurrency.code}\n        storeCurrencyCode={storeCurrency.code}\n    />;\n\n    const continueButton = isSmallScreen() && <Button\n        className='cart-modal-continue'\n        data-test=\"manage-instrument-cancel-button\"\n        onClick={preventDefault(onRequestClose)}>\n            <TranslatedString id=\"cart.return_to_checkout\" />\n    </Button>;\n\n    function getDeliveryDateFormatted(\n        allScheduledShipMethods: AllScheduledShipMethods | null,\n        shippingMethod: string | null,\n        isoDate: string | null\n    ): string | null {\n        if (\n            allScheduledShipMethods &&\n            shippingMethod &&\n            Array.isArray(allScheduledShipMethods[shippingMethod])\n        ) {\n            const shippingData = allScheduledShipMethods[shippingMethod].find(\n                (entry) => entry.shipDate === isoDate\n            );\n            if (shippingData) {\n                return shippingData.deliveryDate.formatted;\n            }\n        }\n        return null;\n    }\n\n    function getFormattedShippingMethod(method: string): string | null {\n        const validMethods = [\"Ground\", \"Next Day Air\", \"2nd Day Air\"];\n        for (const validMethod of validMethods) {\n            if (method.includes(validMethod)) {\n                return validMethod; // Return the matched method\n            }\n        }\n        return null; // Return null if no valid method is found\n    }\n\n    const lastZipCodeRef = useRef<string | null>(null);\n\n    useEffect(() => {\n        window.addEventListener('multiShipClick', (event) => {\n            const multiShipClickEvent = event as CustomEvent<{ isMultiShippingMode: boolean }>;\n            console.log(multiShipClickEvent)\n            setMultiShipClick(!multiShipClick)\n        });\n        window.addEventListener('addressClick', (event) => {\n            const addressClickEvent = event as CustomEvent<{ address: Address }>;\n            const eventZipCode = (addressClickEvent.detail.address as unknown as { postalCode: string }).postalCode;\n            setAddressClick(!addressClick)\n            setAddressZipCode(eventZipCode)\n            setCheckoutZipCode(eventZipCode)\n        });\n        window.addEventListener('zipCodeInputEvent', (event) => {\n            const zipCodeInputEvent = event as CustomEvent<{ zipCodeInput: string }>;\n            const zipCodeValue = zipCodeInputEvent.detail.zipCodeInput\n            if (zipCodeValue && zipCodeValue !== lastZipCodeRef.current) {\n                lastZipCodeRef.current = zipCodeValue;\n                setAddressZipCode(zipCodeValue);\n                setCheckoutZipCode(zipCodeValue);\n            }\n        });\n    })\n\n    useEffect(() => {\n        const shipDateObject = localStorage.getItem('selectedShipDateObject');\n        const zipCodeItem = localStorage.getItem('zipCode');\n        const checkoutZipCodeItem = localStorage.getItem('checkoutZipCode')\n        const checkoutShippingMethod = localStorage.getItem('checkoutShippingMethod')\n        const isMultiShippingModeItem = localStorage.getItem('isMultiShippingMode')\n        const allScheduledShipMethods: AllScheduledShipMethods | null = JSON.parse(\n            localStorage.getItem('allScheduledShipMethods') || 'null'\n        );\n        \n        if (shipDateObject && shipDateObject !== 'null') {\n            const parsedShipDateObject: ShipDateObject = JSON.parse(shipDateObject);\n            const deliveryDate = getDeliveryDateFormatted(allScheduledShipMethods, shippingMethod, parsedShipDateObject.isoDate)\n            setFormattedShipDate(parsedShipDateObject.formatted);\n            setFormattedDeliveryEstimate(deliveryDate);\n        }\n        if (zipCodeItem && zipCodeItem !== 'null' && checkoutZipCodeItem && checkoutZipCodeItem !== 'null' && checkoutZipCodeItem !== undefined) {\n            const rawZipCode = localStorage.getItem(\"zipCode\");\n            const zipCodeItem = rawZipCode ? JSON.parse(rawZipCode) : null;\n            // const rawCheckoutZipCode = localStorage.getItem(\"checkoutZipCode\");\n            // const checkoutZipCodeItem = rawCheckoutZipCode ? JSON.parse(rawCheckoutZipCode) : null;\n            setZipCode(zipCodeItem);\n            // setCheckoutZipCode(checkoutZipCodeItem)\n        }\n        if (checkoutShippingMethod && checkoutShippingMethod !== 'null') {\n            const rawShippingMethod = localStorage.getItem(\"checkoutShippingMethod\");\n            const rawShippingMethodItem = rawShippingMethod ? JSON.parse(rawShippingMethod) : null;\n            setShippingMethod(getFormattedShippingMethod(rawShippingMethodItem));\n        }\n        if (isMultiShippingModeItem !== null && isMultiShippingModeItem !== 'null') {\n            const parsedIsMultiShipModeObject: isMultiShippingMode = JSON.parse(isMultiShippingModeItem);\n            if (typeof parsedIsMultiShipModeObject.value === \"boolean\") {\n                setIsMultiShippingMode(parsedIsMultiShipModeObject.value);\n            }\n        }\n    }), [isMultiShippingMode, zipCode, checkoutZipCode, shippingMethod, formattedShipDate, formattedDeliveryEstimate];\n\n    const renderEstimatedDelivery = () => {\n        if (zipCode === checkoutZipCode || zipCode === addressZipCode) {\n            return (\n                <div className=\"shipping-preview-item\" data-type=\"delivery-date\">\n                    <span>Estimated Delivery</span>\n                <span>{formattedDeliveryEstimate}</span>\n            </div>\n            );\n        }\n        return;\n    }\n\n    return <Modal\n        additionalBodyClassName=\"cart-modal-body optimizedCheckout-orderSummary\"\n        additionalHeaderClassName=\"cart-modal-header optimizedCheckout-orderSummary with-continue-button\"\n        additionalModalClassName=\"optimizedCheckout-cart-modal\"\n        footer={continueButton}\n        header={renderHeader({\n            headerLink,\n            subHeaderText,\n            onRequestClose,\n        })}\n        isOpen={isOpen}\n        onAfterOpen={onAfterOpen}\n        onRequestClose={onRequestClose}\n    >\n        <OrderSummarySection>\n            <OrderSummaryItems displayLineItemsCount={false} items={items} />\n        </OrderSummarySection>\n        {formattedShipDate && \n                <OrderSummarySection>\n                    <div className=\"shipping-preview-container-orderSummary\">\n                        <div className=\"shipping-preview-item\" data-type=\"ship-date\">\n                            <span>Ship Date</span>\n                            <span>{formattedShipDate}</span>\n                        </div>\n                        { isMultiShippingMode === false && renderEstimatedDelivery()}\n                        {/* <span>values: {zipCode} {checkoutZipCode} {addressZipCode}</span> */}\n                    </div>\n                </OrderSummarySection>\n        }\n        <OrderSummarySection>\n            <OrderSummarySubtotals isTaxIncluded={isTaxIncluded} taxes={taxes} {...orderSummarySubtotalsProps} />\n            {additionalLineItems}\n        </OrderSummarySection>\n        <OrderSummarySection>\n            <OrderSummaryTotal\n                orderAmount={total}\n                shopperCurrencyCode={shopperCurrency.code}\n                storeCurrencyCode={storeCurrency.code}\n            />\n        </OrderSummarySection>\n        {displayInclusiveTax && <OrderSummarySection>\n                <h5\n                    className=\"cart-taxItem cart-taxItem--subtotal optimizedCheckout-contentPrimary\"\n                    data-test=\"tax-text\"\n                >\n                    <TranslatedString\n                        id=\"tax.inclusive_label\"\n                    />\n                </h5>\n                {(taxes || []).map((tax, index) => (\n                    <OrderSummaryPrice\n                        amount={tax.amount}\n                        key={index}\n                        label={tax.name}\n                        testId=\"cart-taxes\"\n                    />\n                ))}\n            </OrderSummarySection>}\n    </Modal>\n};\n\nconst renderHeader: FunctionComponent<{\n    headerLink?: ReactNode & React.HTMLProps<HTMLDivElement>;\n    subHeaderText: ReactNode;\n    onRequestClose?(): void;\n}> = ({ onRequestClose, headerLink, subHeaderText }) => {\n    let newHeaderLink;\n\n    if (isValidElement(headerLink)) {\n        newHeaderLink = cloneElement(headerLink, { className: 'modal-header-link cart-modal-link test' });\n    }\n\n    return <>\n        {newHeaderLink ?? headerLink}\n        <ModalHeader additionalClassName=\"cart-modal-title\">\n            <div>\n                <TranslatedString id=\"cart.cart_heading\" />\n                <div className='cart-heading-subheader'>{subHeaderText}</div>\n            </div>\n        </ModalHeader>\n        <a className=\"cart-modal-close\" href=\"#\" onClick={preventDefault(onRequestClose)}>\n            <span className=\"is-srOnly\">\n                <TranslatedString id=\"common.close_action\" />\n            </span>\n            <IconCloseWithBorder />\n        </a>\n    </>\n};\n\nexport default OrderSummaryModal;\n","import {\n    LineItemMap,\n    ShopperCurrency as ShopperCurrencyType,\n    StoreCurrency,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { ShopperCurrency } from '../currency';\nimport { IconGiftCertificate } from '../ui/icon';\nimport { ModalTrigger } from '../ui/modal';\n\nimport getItemsCount from './getItemsCount';\nimport getLineItemsCount from './getLineItemsCount';\nimport OrderSummaryModal from './OrderSummaryModal';\nimport { OrderSummarySubtotalsProps } from './OrderSummarySubtotals';\nimport removeBundledItems from './removeBundledItems';\n\nexport interface OrderSummaryDrawerProps {\n    lineItems: LineItemMap;\n    total: number;\n    headerLink: ReactNode;\n    storeCurrency: StoreCurrency;\n    shopperCurrency: ShopperCurrencyType;\n    additionalLineItems?: ReactNode;\n}\n\nconst OrderSummaryDrawer: FunctionComponent<\n    OrderSummaryDrawerProps & OrderSummarySubtotalsProps\n> = ({\n    additionalLineItems,\n    coupons,\n    discountAmount,\n    giftCertificates,\n    handlingAmount,\n    headerLink,\n    isTaxIncluded,\n    lineItems,\n    onRemovedCoupon,\n    onRemovedGiftCertificate,\n    shippingAmount,\n    shopperCurrency,\n    storeCreditAmount,\n    giftWrappingAmount,\n    storeCurrency,\n    subtotalAmount,\n    taxes,\n    total,\n    fees,\n}) => {\n    const nonBundledLineItems = useMemo(() => removeBundledItems(lineItems), [lineItems]);\n\n    const renderModal = useCallback(\n        (props) => (\n            <OrderSummaryModal\n                {...props}\n                additionalLineItems={additionalLineItems}\n                coupons={coupons}\n                discountAmount={discountAmount}\n                fees={fees}\n                giftCertificates={giftCertificates}\n                giftWrappingAmount={giftWrappingAmount}\n                handlingAmount={handlingAmount}\n                headerLink={headerLink}\n                isTaxIncluded={isTaxIncluded}\n                items={nonBundledLineItems}\n                onRemovedCoupon={onRemovedCoupon}\n                onRemovedGiftCertificate={onRemovedGiftCertificate}\n                shippingAmount={shippingAmount}\n                shopperCurrency={shopperCurrency}\n                storeCreditAmount={storeCreditAmount}\n                storeCurrency={storeCurrency}\n                subtotalAmount={subtotalAmount}\n                taxes={taxes}\n                total={total}\n            />\n        ),\n        [\n            additionalLineItems,\n            coupons,\n            discountAmount,\n            giftCertificates,\n            handlingAmount,\n            headerLink,\n            isTaxIncluded,\n            nonBundledLineItems,\n            onRemovedCoupon,\n            onRemovedGiftCertificate,\n            giftWrappingAmount,\n            shippingAmount,\n            shopperCurrency,\n            storeCreditAmount,\n            storeCurrency,\n            subtotalAmount,\n            taxes,\n            total,\n            fees,\n        ],\n    );\n\n    return (\n        <ModalTrigger modal={renderModal}>\n            {({ onClick, onKeyPress }) => (\n                <div\n                    className=\"cartDrawer optimizedCheckout-orderSummary\"\n                    onClick={onClick}\n                    onKeyPress={onKeyPress}\n                    tabIndex={0}\n                >\n                    <figure\n                        className={classNames('cartDrawer-figure', {\n                            'cartDrawer-figure--stack': getLineItemsCount(nonBundledLineItems) > 1,\n                        })}\n                    >\n                        <div className=\"cartDrawer-imageWrapper\">{getImage(nonBundledLineItems)}</div>\n                    </figure>\n                    <div className=\"cartDrawer-body\">\n                        <h3 className=\"cartDrawer-items optimizedCheckout-headingPrimary\">\n                            <TranslatedString\n                                data={{ count: getItemsCount(nonBundledLineItems) }}\n                                id=\"cart.item_count_text\"\n                            />\n                        </h3>\n                        <a>\n                            <TranslatedString id=\"cart.show_details_action\" />\n                        </a>\n                    </div>\n                    <div className=\"cartDrawer-actions\">\n                        <h3 className=\"cartDrawer-total optimizedCheckout-headingPrimary\">\n                            <ShopperCurrency amount={total} />\n                        </h3>\n                    </div>\n                </div>\n            )}\n        </ModalTrigger>\n    );\n};\n\nfunction getImage(lineItems: LineItemMap): ReactNode {\n    const productWithImage = lineItems.physicalItems[0] || lineItems.digitalItems[0];\n\n    if (productWithImage && productWithImage.imageUrl) {\n        return (\n            <img\n                alt={productWithImage.name}\n                data-test=\"cart-item-image\"\n                src={productWithImage.imageUrl}\n            />\n        );\n    }\n\n    if (lineItems.giftCertificates.length) {\n        return <IconGiftCertificate />;\n    }\n}\n\nexport default memo(OrderSummaryDrawer);\n","import React, {\n    Component,\n    KeyboardEvent,\n    KeyboardEventHandler,\n    MouseEventHandler,\n    ReactNode,\n} from 'react';\n\nexport interface ModalTriggerProps {\n    children(props: { onClick: MouseEventHandler; onKeyPress: KeyboardEventHandler<HTMLDivElement> }): ReactNode;\n    modal(props: ModalTriggerModalProps): ReactNode;\n}\n\nexport interface ModalTriggerModalProps {\n    isOpen: boolean;\n    onRequestClose(): void;\n}\n\nexport interface ModalTriggerState {\n    isOpen: boolean;\n}\n\nexport default class ModalTrigger extends Component<ModalTriggerProps, ModalTriggerState> {\n    state = {\n        isOpen: false,\n    };\n\n    private canHandleEvent = false;\n\n    componentDidMount(): void {\n        this.canHandleEvent = true;\n    }\n\n    componentWillUnmount(): void {\n        this.canHandleEvent = false;\n    }\n\n    render() {\n        const { children, modal } = this.props;\n        const { isOpen } = this.state;\n\n        return (\n            <>\n                {children({\n                    onClick: this.handleOpen,\n                    onKeyPress: this.handleKeyOpen,\n                })}\n\n                {modal({\n                    isOpen,\n                    onRequestClose: this.handleClose,\n                })}\n            </>\n        );\n    }\n\n    private handleOpen: () => void = () => {\n        if (!this.canHandleEvent) {\n            return;\n        }\n\n        this.setState({\n            isOpen: true,\n        });\n    };\n\n    private handleClose: () => void = () => {\n        if (!this.canHandleEvent) {\n            return;\n        }\n\n        this.setState({\n            isOpen: false,\n        });\n    };\n\n    private handleKeyOpen: (keyboardEvent: KeyboardEvent<HTMLElement>) => void = (\n        keyboardEvent,\n    ) => {\n        if (keyboardEvent.key === 'Enter') {\n            this.handleOpen();\n        }\n    };\n}\n","import classNames from 'classnames';\nimport React, { ButtonHTMLAttributes, FunctionComponent } from 'react';\n\nexport interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n    isFullWidth?: boolean;\n    isLoading?: boolean;\n    size?: ButtonSize;\n    testId?: string;\n    variant?: ButtonVariant;\n}\n\nexport enum ButtonVariant {\n    Primary = 'primary',\n    Secondary = 'secondary',\n    Action = 'action',\n}\n\nexport enum ButtonSize {\n    Small = 'small',\n    Tiny = 'tiny',\n    Large = 'large',\n}\n\nfunction getClassName(\n    props: Pick<ButtonProps, 'className' | 'isFullWidth' | 'isLoading' | 'size' | 'variant'>,\n) {\n    const { className, isFullWidth, isLoading, size, variant } = props;\n\n    return classNames(\n        'button',\n        className,\n        { 'button--primary': variant === ButtonVariant.Primary },\n        { 'button--tertiary': variant === ButtonVariant.Secondary },\n        { 'button--action': variant === ButtonVariant.Action },\n        { 'button--small': size === ButtonSize.Small },\n        { 'button--tiny': size === ButtonSize.Tiny },\n        { 'button--large': size === ButtonSize.Large },\n        { 'button--slab': isFullWidth },\n        {\n            'optimizedCheckout-buttonPrimary':\n                variant === ButtonVariant.Primary || variant === ButtonVariant.Action,\n        },\n        { 'optimizedCheckout-buttonSecondary': variant === ButtonVariant.Secondary },\n        { 'is-loading': isLoading },\n    );\n}\n\nconst Button: FunctionComponent<ButtonProps> = ({\n    children,\n    className,\n    disabled,\n    isFullWidth,\n    isLoading,\n    size,\n    testId,\n    type,\n    variant,\n    ...rest\n}) => (\n    <button\n        {...rest}\n        className={getClassName({ className, isFullWidth, isLoading, size, variant })}\n        data-test={testId}\n        disabled={disabled || isLoading}\n        type={type || 'button'}\n    >\n        {children}\n    </button>\n);\n\nexport default Button;\n"],"names":["getLineItemsCount","physicalItems","digitalItems","giftCertificates","customItems","length","fill","height","viewBox","width","xmlns","d","clipRule","fillRule","memo","items","shopperCurrencyCode","storeCurrencyCode","amountWithCurrency","itemsCount","getItemsCount","hasDifferentCurrency","itemsText","TranslatedString","id","renderHeader","newHeaderLink","onRequestClose","headerLink","subHeaderText","isValidElement","cloneElement","className","ModalHeader","additionalClassName","href","onClick","preventDefault","additionalLineItems","isTaxIncluded","taxes","onAfterOpen","storeCurrency","shopperCurrency","isOpen","total","orderSummarySubtotalsProps","displayInclusiveTax","useState","formattedShipDate","setFormattedShipDate","formattedDeliveryEstimate","setFormattedDeliveryEstimate","zipCode","setZipCode","checkoutZipCode","setCheckoutZipCode","addressZipCode","setAddressZipCode","shippingMethod","setShippingMethod","isMultiShippingMode","setIsMultiShippingMode","multiShipClick","setMultiShipClick","addressClick","setAddressClick","console","log","ShopperCurrency","amount","code","continueButton","isSmallScreen","Button","lastZipCodeRef","useRef","useEffect","window","addEventListener","event","multiShipClickEvent","eventZipCode","detail","address","postalCode","zipCodeValue","zipCodeInput","current","shipDateObject","localStorage","getItem","zipCodeItem","checkoutZipCodeItem","checkoutShippingMethod","isMultiShippingModeItem","allScheduledShipMethods","JSON","parse","parsedShipDateObject","deliveryDate","isoDate","Array","isArray","shippingData","find","entry","shipDate","formatted","getDeliveryDateFormatted","undefined","rawZipCode","rawShippingMethod","rawShippingMethodItem","method","validMethod","includes","getFormattedShippingMethod","parsedIsMultiShipModeObject","value","Modal","additionalBodyClassName","additionalHeaderClassName","additionalModalClassName","footer","header","OrderSummarySection","OrderSummaryItems","displayLineItemsCount","renderEstimatedDelivery","OrderSummarySubtotals","OrderSummaryTotal","orderAmount","map","tax","index","OrderSummaryPrice","key","label","name","testId","coupons","discountAmount","handlingAmount","lineItems","onRemovedCoupon","onRemovedGiftCertificate","shippingAmount","storeCreditAmount","giftWrappingAmount","subtotalAmount","fees","nonBundledLineItems","useMemo","removeBundledItems","renderModal","useCallback","props","ModalTrigger","modal","onKeyPress","tabIndex","productWithImage","imageUrl","alt","src","IconGiftCertificate","getImage","data","count","state","canHandleEvent","handleOpen","setState","handleClose","handleKeyOpen","keyboardEvent","componentDidMount","this","componentWillUnmount","render","children","Component","ButtonVariant","ButtonSize","getClassName","isFullWidth","isLoading","size","variant","Primary","Secondary","Action","Small","Tiny","Large","disabled","type","rest"],"sourceRoot":""}